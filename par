#!/usr/bin/env sh
###---------------------------------------------------------------------
### par
### Parallelize commands. Displays up to 6 colors. Max 4000 char lines
### William Ughetta. February 2022. MIT License
###---------------------------------------------------------------------
set -euf -o pipefail

if [ $# -lt 1 ]; then >&2 echo example: $0 \'ping\ {google,apple}.com\'; exit 1; fi

TAG='par'
TIMEOUT_MINUTES=0 # Max run time (0 == DISABLED)

# Print colored line (6 colors: red, green, yellow, purple, pink, cyan)
# https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_(Select_Graphic_Rendition)_parameters
function print_color {
  if [ $1 -eq 0 ]; then printf "\033[0m%s" "$2"; return; fi # Skip color if zero
  printf "\033[1;%sm%s\033[0m" $(( 31+$1%6 )) "$2"
}

# Line up the output names
ABSMAX=71
MAXLEN=0; for i; do if [ ${#i} -gt $MAXLEN ]; then MAXLEN=${#i}; fi; done
if [ $MAXLEN -gt $ABSMAX ]; then MAXLEN=$ABSMAX; fi
function println { print_color $1 "$(printf "%-$(($MAXLEN+1))s| " "$2")";printf "%s\n" "$3"; }

# Pad: Adapted from http://catern.org/pipes.html
PIPEBUF=4096 #`getconf PIPE_BUF /` # Reduces interleaving
pad() { 2>/dev/null dd conv=block cbs=$PIPEBUF obs=$PIPEBUF ; }
unpad() { 2>/dev/null dd conv=unblock cbs=$PIPEBUF ibs=$PIPEBUF ; }

# Exit when first sub-process exits
UNIFIED=`mktemp -u -t PIPE_UNIFIED`; mkfifo $UNIFIED
PIDS=""; C=0
for i; do
  C=$(( $C + 1 )); t=`mktemp -u -t PIPE_TMP_$C`; mkfifo $t
  ${i} &> $t &
  PIDS+="$! "
  cat $t | while read line; do println $C "$i" "$line" ; done | pad >> $UNIFIED &
done
println 0 "$TAG" "Started $C procs. Warning: lines truncated around $PIPEBUF chars. Waiting for any nonzero exit. PIDs: $PIDS"

# Continuously echo to stdout
while true; do cat $UNIFIED | unpad ; done &
PRINTER_PID="$!"

# Stop the background printer when ctrl-c is pressed
function stop_stragglers {
  for PID in "`pgrep -P $PRINTER_PID` $PRINTER_PID"; do &>/dev/null kill -9 $PID || true; &>/dev/null wait $PID || true; done # printer
  echo 'SIGINT. Exit code: 2'; exit 2
}
trap stop_stragglers SIGINT

EXITCODE=0
N_EXIT_ZERO=0
PIDS_EXIT_ZERO=""
# Check every second if all processes exited zero or if any one exited nonzero
set +e
while [ $EXITCODE -eq 0 ] && [ $N_EXIT_ZERO -lt $C ]; do
  j=0
  for PID1 in $PIDS; do j=$(($j+1))
    if ! ps -p $PID1 &>/dev/null && ! [[ $PIDS_EXIT_ZERO == *" $PID1 "* ]]; then
      &>/dev/null wait $PID1; EXITCODE=$?
      EXTRA=""; if [ $EXITCODE -ne 0 ]; then EXTRA=". Killing remaining $(( $C - $N_EXIT_ZERO )) processes..."; fi
      COMMAND_NAME="$(eval echo $`echo $j`)"
      printf "%s\n" "$(print_color $j '`'"$COMMAND_NAME"'`'" exited with code $EXITCODE (PID: $PID1)$EXTRA")" | pad >> $UNIFIED
      if [ $EXITCODE -eq 0 ]; then N_EXIT_ZERO=$(( $N_EXIT_ZERO + 1 )); PIDS_EXIT_ZERO+=" $PID1 "; continue; fi
      KIDPIDS="$(for PID2 in $PIDS; do echo pgrep -P $PID2; done)" # Only 1 level deep of ending child processes
      for PID2 in "$KIDPIDS $PIDS"; do &>/dev/null kill -9 $PID2; &>/dev/null wait $PID2; done; break # All done!
    fi
  done
  sleep 1
done
set -e

for PID in $PIDS; do &>/dev/null wait $PID || true; done
for PID in "`pgrep -P $PRINTER_PID` $PRINTER_PID"; do &>/dev/null kill -9 $PID || true; &>/dev/null wait $PID || true; done # Printer and children

println 0 "$TAG" "Done. Exit code: $EXITCODE"
exit $EXITCODE
